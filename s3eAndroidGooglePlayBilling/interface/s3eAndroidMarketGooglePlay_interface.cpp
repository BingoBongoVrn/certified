/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eAndroidMarketGooglePlay.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eAndroidMarketGooglePlayIsBillingSupported_t)();
typedef s3eIOSAndroidMarketGooglePlayItemInfo*(*s3eAndroidMarketGooglePlayGetItemData_t)(const char** skuList, const int listSize);
typedef s3eIOSAndroidMarketGooglePlayPurchaseInfo*(*s3eAndroidMarketGooglePlayPurchaseItem_t)(const char* productID, const char* develperPayLoad);
typedef        int(*s3eAndroidMarketGooglePlayQueryPurchasedItemAmount_t)();
typedef s3eIOSAndroidMarketGooglePlayPurchaseInfo*(*s3eAndroidMarketGooglePlayQueryPurchasedItem_t)(const int itemNo);

/**
 * struct that gets filled in by s3eAndroidMarketGooglePlayRegister
 */
typedef struct s3eAndroidMarketGooglePlayFuncs
{
    s3eAndroidMarketGooglePlayIsBillingSupported_t m_s3eAndroidMarketGooglePlayIsBillingSupported;
    s3eAndroidMarketGooglePlayGetItemData_t m_s3eAndroidMarketGooglePlayGetItemData;
    s3eAndroidMarketGooglePlayPurchaseItem_t m_s3eAndroidMarketGooglePlayPurchaseItem;
    s3eAndroidMarketGooglePlayQueryPurchasedItemAmount_t m_s3eAndroidMarketGooglePlayQueryPurchasedItemAmount;
    s3eAndroidMarketGooglePlayQueryPurchasedItem_t m_s3eAndroidMarketGooglePlayQueryPurchasedItem;
} s3eAndroidMarketGooglePlayFuncs;

static s3eAndroidMarketGooglePlayFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xbc5a8fe8, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eAndroidMarketGooglePlay");
            
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xbc5a8fe8, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eAndroidMarketGooglePlayAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eAndroidMarketGooglePlayIsBillingSupported()
{
    IwTrace(ANDROIDMARKETGOOGLEPLAY_VERBOSE, ("calling s3eAndroidMarketGooglePlay[0] func: s3eAndroidMarketGooglePlayIsBillingSupported"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eAndroidMarketGooglePlayIsBillingSupported();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eIOSAndroidMarketGooglePlayItemInfo* s3eAndroidMarketGooglePlayGetItemData(const char** skuList, const int listSize)
{
    IwTrace(ANDROIDMARKETGOOGLEPLAY_VERBOSE, ("calling s3eAndroidMarketGooglePlay[1] func: s3eAndroidMarketGooglePlayGetItemData"));

    if (!_extLoad())
        return 0;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eIOSAndroidMarketGooglePlayItemInfo* ret = g_Ext.m_s3eAndroidMarketGooglePlayGetItemData(skuList, listSize);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eIOSAndroidMarketGooglePlayPurchaseInfo* s3eAndroidMarketGooglePlayPurchaseItem(const char* productID, const char* develperPayLoad)
{
    IwTrace(ANDROIDMARKETGOOGLEPLAY_VERBOSE, ("calling s3eAndroidMarketGooglePlay[2] func: s3eAndroidMarketGooglePlayPurchaseItem"));

    if (!_extLoad())
        return 0;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eIOSAndroidMarketGooglePlayPurchaseInfo* ret = g_Ext.m_s3eAndroidMarketGooglePlayPurchaseItem(productID, develperPayLoad);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

int s3eAndroidMarketGooglePlayQueryPurchasedItemAmount()
{
    IwTrace(ANDROIDMARKETGOOGLEPLAY_VERBOSE, ("calling s3eAndroidMarketGooglePlay[3] func: s3eAndroidMarketGooglePlayQueryPurchasedItemAmount"));

    if (!_extLoad())
        return 0;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_s3eAndroidMarketGooglePlayQueryPurchasedItemAmount();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eIOSAndroidMarketGooglePlayPurchaseInfo* s3eAndroidMarketGooglePlayQueryPurchasedItem(const int itemNo)
{
    IwTrace(ANDROIDMARKETGOOGLEPLAY_VERBOSE, ("calling s3eAndroidMarketGooglePlay[4] func: s3eAndroidMarketGooglePlayQueryPurchasedItem"));

    if (!_extLoad())
        return 0;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eIOSAndroidMarketGooglePlayPurchaseInfo* ret = g_Ext.m_s3eAndroidMarketGooglePlayQueryPurchasedItem(itemNo);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
